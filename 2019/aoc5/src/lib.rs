const ADD: i32 = 1;
const MUL: i32 = 2;
const INP: i32 = 3;
const OUT: i32 = 4;
const HLT: i32 = 99;

const POSITION: i32 = 0;
const IMMEDIATE: i32 = 1;

pub fn dst(v: &Vec<i32>, offset: usize) -> usize {
    operand(v, offset, IMMEDIATE) as usize
}

pub fn operand(v: &Vec<i32>, offset: usize, mode: i32) -> i32 {
    match mode {
        POSITION => {
            let op = v[offset] as usize;
            // println!("\tPOS: {:?} @ {:?} (={:?})", op, offset, v[op]);
            v[op]
        }
        IMMEDIATE => {
            // println!("\tIMM: ={:?} @ {:?}", v[offset], offset);
            v[offset]
        },
        v => panic!("Unknown mode {:?}", v),
    }
}

pub fn execute(mut v: Vec<i32>) -> (i32, Vec<i32>) {
    let mut pc: usize = 0;
    let mut output: i32 = 0;
    loop {
        // println!("PC: {:?}", pc);
        let opcode = v[pc];
        let instruction = opcode % 100;
        let m1 = (opcode / 100) % 10;
        let m2 = (opcode / 1000) % 10;
        let m3 = (opcode / 10000) % 10;
        // println!("\n  {:04}: ins {:?} ({:?}) [{:?}, {:?}, {:?}]", pc, instruction, opcode, m1, m2, m3);

        match instruction {
            ADD => {
                let op1 = operand(&v, pc + 1, m1);
                let op2 = operand(&v, pc + 2, m2);
                let dst = dst(&v, pc + 3);
                v[dst] = op1 + op2;
                // println!("{:04}: ADD: {:?} + {:?} => &{:?} ({:?})", pc, op1, op2, dst, v[dst]);
                pc += 4;
            }
            MUL => {
                let op1 = operand(&v, pc + 1, m1);
                let op2 = operand(&v, pc + 2, m2);
                let dst = dst(&v, pc + 3);
                v[dst] = op1 * op2;
                // println!("{:04}: MUL: {:?} * {:?} => &{:?} ({:?})", pc, op1, op2, dst, v[dst]);
                pc += 4;
            }
            INP => {
                let dst = dst(&v, pc + 1);
                v[dst] = 1; // hardcoded input
                // println!("{:04}: INP: 1 => {:?} ({:?})", pc, dst, v[dst]);
                pc += 2;
            }
            OUT => {
                output = operand(&v, pc + 1, m1);
                println!("{:04}: OUT: {:?}", pc, output);
                pc += 2;
            }
            HLT => break,
            v => panic!("Unknown opcode {:?}", v),
        }
    }
    (output, v)
}

#[cfg(test)]
mod tests {
    use crate::execute;

    #[test]
    fn ex1() {
        let input = vec![1, 0, 0, 0, 99];
        let output = vec![2, 0, 0, 0, 99];
        assert_eq!(execute(input).1, output);
    }

    #[test]
    fn ex_imm_add() {
        let input = vec![1101, 1, 1, 0, 99];
        let output = vec![2, 1, 1, 0, 99];
        assert_eq!(execute(input).1, output);
    }

    #[test]
    fn ex_imm_mul() {
        let input = vec![102, 3, 1, 0, 99];
        let output = vec![9, 3, 1, 0, 99];
        assert_eq!(execute(input).1, output);
    }

    #[test]
    fn ex2() {
        let input = vec![2, 3, 0, 3, 99];
        let output = vec![2, 3, 0, 6, 99];
        assert_eq!(execute(input).1, output);
    }

    #[test]
    fn input_output() {
        let input = vec![3, 0, 4, 0, 99];
        let output = vec![1, 0, 4, 0, 99];
        let res = execute(input);
        assert_eq!(res.0, 1);
        assert_eq!(res.1, output);
    }

    #[test]
    fn ex4() {
        let input = vec![1, 1, 1, 4, 99, 5, 6, 0, 99];
        let output = vec![30, 1, 1, 4, 2, 5, 6, 0, 99];
        assert_eq!(execute(input).1, output);
    }

    #[test]
    fn part1() {
        let input = vec![
            3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1002, 148, 28, 224, 1001, 224, -672,
            224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1102, 8, 21, 225,
            1102, 13, 10, 225, 1102, 21, 10, 225, 1102, 6, 14, 225, 1102, 94, 17, 225, 1, 40, 173,
            224, 1001, 224, -90, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 224, 223,
            223, 2, 35, 44, 224, 101, -80, 224, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1,
            223, 224, 223, 1101, 26, 94, 224, 101, -120, 224, 224, 4, 224, 102, 8, 223, 223, 1001,
            224, 7, 224, 1, 224, 223, 223, 1001, 52, 70, 224, 101, -87, 224, 224, 4, 224, 1002,
            223, 8, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1101, 16, 92, 225, 1101, 59, 24, 225,
            102, 83, 48, 224, 101, -1162, 224, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1,
            223, 224, 223, 1101, 80, 10, 225, 101, 5, 143, 224, 1001, 224, -21, 224, 4, 224, 1002,
            223, 8, 223, 1001, 224, 6, 224, 1, 223, 224, 223, 1102, 94, 67, 224, 101, -6298, 224,
            224, 4, 224, 102, 8, 223, 223, 1001, 224, 3, 224, 1, 224, 223, 223, 4, 223, 99, 0, 0,
            0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1,
            99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265,
            1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1,
            99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300,
            1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 677,
            677, 224, 102, 2, 223, 223, 1005, 224, 329, 101, 1, 223, 223, 1107, 677, 226, 224, 102,
            2, 223, 223, 1006, 224, 344, 101, 1, 223, 223, 1107, 226, 226, 224, 102, 2, 223, 223,
            1006, 224, 359, 101, 1, 223, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1005, 224,
            374, 101, 1, 223, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 389, 101, 1,
            223, 223, 108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 404, 1001, 223, 1, 223,
            107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 419, 101, 1, 223, 223, 1007, 226, 226,
            224, 102, 2, 223, 223, 1005, 224, 434, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2,
            223, 223, 1005, 224, 449, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1006,
            224, 464, 101, 1, 223, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 479,
            101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 494, 101, 1, 223,
            223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 1001, 223, 1, 223, 1007,
            226, 677, 224, 1002, 223, 2, 223, 1006, 224, 524, 1001, 223, 1, 223, 107, 226, 226,
            224, 1002, 223, 2, 223, 1006, 224, 539, 1001, 223, 1, 223, 1107, 226, 677, 224, 102, 2,
            223, 223, 1005, 224, 554, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223,
            1006, 224, 569, 101, 1, 223, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224,
            584, 1001, 223, 1, 223, 7, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 599, 101, 1,
            223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 614, 101, 1, 223, 223, 7, 226,
            677, 224, 1002, 223, 2, 223, 1005, 224, 629, 101, 1, 223, 223, 1008, 226, 677, 224,
            1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 107, 226, 677, 224, 1002, 223, 2,
            223, 1005, 224, 659, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1006,
            224, 674, 1001, 223, 1, 223, 4, 223, 99, 226,
        ];

        let output = execute(input);
        assert_eq!(output.0, 7566643);
    }

    #[test]
    fn part2() {
        let _original = vec![
            3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1002, 148, 28, 224, 1001, 224, -672,
            224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 224, 223, 223, 1102, 8, 21, 225,
            1102, 13, 10, 225, 1102, 21, 10, 225, 1102, 6, 14, 225, 1102, 94, 17, 225, 1, 40, 173,
            224, 1001, 224, -90, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 4, 224, 1, 224, 223,
            223, 2, 35, 44, 224, 101, -80, 224, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1,
            223, 224, 223, 1101, 26, 94, 224, 101, -120, 224, 224, 4, 224, 102, 8, 223, 223, 1001,
            224, 7, 224, 1, 224, 223, 223, 1001, 52, 70, 224, 101, -87, 224, 224, 4, 224, 1002,
            223, 8, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1101, 16, 92, 225, 1101, 59, 24, 225,
            102, 83, 48, 224, 101, -1162, 224, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1,
            223, 224, 223, 1101, 80, 10, 225, 101, 5, 143, 224, 1001, 224, -21, 224, 4, 224, 1002,
            223, 8, 223, 1001, 224, 6, 224, 1, 223, 224, 223, 1102, 94, 67, 224, 101, -6298, 224,
            224, 4, 224, 102, 8, 223, 223, 1001, 224, 3, 224, 1, 224, 223, 223, 4, 223, 99, 0, 0,
            0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1,
            99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265,
            1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1,
            99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300,
            1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 677,
            677, 224, 102, 2, 223, 223, 1005, 224, 329, 101, 1, 223, 223, 1107, 677, 226, 224, 102,
            2, 223, 223, 1006, 224, 344, 101, 1, 223, 223, 1107, 226, 226, 224, 102, 2, 223, 223,
            1006, 224, 359, 101, 1, 223, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1005, 224,
            374, 101, 1, 223, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 389, 101, 1,
            223, 223, 108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 404, 1001, 223, 1, 223,
            107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 419, 101, 1, 223, 223, 1007, 226, 226,
            224, 102, 2, 223, 223, 1005, 224, 434, 101, 1, 223, 223, 1007, 677, 677, 224, 102, 2,
            223, 223, 1005, 224, 449, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1006,
            224, 464, 101, 1, 223, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 479,
            101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 494, 101, 1, 223,
            223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 1001, 223, 1, 223, 1007,
            226, 677, 224, 1002, 223, 2, 223, 1006, 224, 524, 1001, 223, 1, 223, 107, 226, 226,
            224, 1002, 223, 2, 223, 1006, 224, 539, 1001, 223, 1, 223, 1107, 226, 677, 224, 102, 2,
            223, 223, 1005, 224, 554, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223,
            1006, 224, 569, 101, 1, 223, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224,
            584, 1001, 223, 1, 223, 7, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 599, 101, 1,
            223, 223, 8, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 614, 101, 1, 223, 223, 7, 226,
            677, 224, 1002, 223, 2, 223, 1005, 224, 629, 101, 1, 223, 223, 1008, 226, 677, 224,
            1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 107, 226, 677, 224, 1002, 223, 2,
            223, 1005, 224, 659, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1006,
            224, 674, 1001, 223, 1, 223, 4, 223, 99, 226,
        ];
        let answer = 0;
        assert_eq!(answer, 0);
    }
}
